-- Real Estate Management SQL Script

-- Table for customers or clients
CREATE TABLE Customers (
    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    Phone VARCHAR2(15),
    Address VARCHAR2(200),
    CreatedDate DATE DEFAULT SYSDATE
);

-- Table for real estate agents
CREATE TABLE Agents (
    AgentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Email VARCHAR2(100),
    Phone VARCHAR2(15),
    CommissionRate NUMBER(5, 2) DEFAULT 5
);

-- Table for property listings
CREATE TABLE Properties (
    PropertyID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Location VARCHAR2(200) NOT NULL,
    Type VARCHAR2(50) CHECK (Type IN ('Residential', 'Commercial', 'Industrial', 'Land')),
    Size NUMBER(10, 2) NOT NULL, -- Size in square feet
    Price NUMBER(15, 2) NOT NULL,
    Description VARCHAR2(500),
    AgentID NUMBER REFERENCES Agents(AgentID)
);

-- Table for property transactions
CREATE TABLE Transactions (
    TransactionID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PropertyID NUMBER REFERENCES Properties(PropertyID),
    CustomerID NUMBER REFERENCES Customers(CustomerID),
    AgentID NUMBER REFERENCES Agents(AgentID),
    TransactionDate DATE DEFAULT SYSDATE,
    Amount NUMBER(15, 2) NOT NULL,
    Status VARCHAR2(50) CHECK (Status IN ('Pending', 'Completed', 'Cancelled'))
);

-- Table for inquiries or leads
CREATE TABLE Inquiries (
    InquiryID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER REFERENCES Customers(CustomerID),
    PropertyID NUMBER REFERENCES Properties(PropertyID),
    InquiryDate DATE DEFAULT SYSDATE,
    Status VARCHAR2(50) CHECK (Status IN ('New', 'In Progress', 'Closed')),
    Notes VARCHAR2(500)
);

-- Sample data insertion
INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('John Doe', 'john.doe@example.com', '1234567890', '123 Elm Street');
INSERT INTO Customers (Name, Email, Phone, Address) VALUES ('Jane Smith', 'jane.smith@example.com', '0987654321', '456 Oak Avenue');

INSERT INTO Agents (Name, Email, Phone, CommissionRate) VALUES ('Alice Agent', 'alice.agent@example.com', '5551234567', 7.5);
INSERT INTO Agents (Name, Email, Phone, CommissionRate) VALUES ('Bob Broker', 'bob.broker@example.com', '5559876543', 6);

INSERT INTO Properties (Name, Location, Type, Size, Price, Description, AgentID) VALUES ('Sunset Villa', 'Miami, FL', 'Residential', 3500, 750000, 'Luxurious villa with ocean view.', 1);
INSERT INTO Properties (Name, Location, Type, Size, Price, Description, AgentID) VALUES ('Downtown Office', 'New York, NY', 'Commercial', 5000, 1500000, 'Prime office space in the city center.', 2);

INSERT INTO Transactions (PropertyID, CustomerID, AgentID, Amount, Status) VALUES (1, 1, 1, 750000, 'Completed');
INSERT INTO Transactions (PropertyID, CustomerID, AgentID, Amount, Status) VALUES (2, 2, 2, 1500000, 'Pending');

INSERT INTO Inquiries (CustomerID, PropertyID, Status, Notes) VALUES (1, 2, 'New', 'Interested in office space.');
INSERT INTO Inquiries (CustomerID, PropertyID, Status, Notes) VALUES (2, 1, 'In Progress', 'Looking for more details.');

-- Trigger to update agent commission rate based on transactions
CREATE OR REPLACE TRIGGER UpdateCommissionRate
AFTER INSERT OR UPDATE ON Transactions
FOR EACH ROW
BEGIN
    IF :NEW.Status = 'Completed' THEN
        UPDATE Agents
        SET CommissionRate = CommissionRate + 1
        WHERE AgentID = :NEW.AgentID;
    END IF;
END;
/

-- Trigger to track inquiries updates
CREATE OR REPLACE TRIGGER TrackInquiryUpdates
AFTER UPDATE ON Inquiries
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Inquiry ID ' || :OLD.InquiryID || ' status changed from ' || :OLD.Status || ' to ' || :NEW.Status);
END;
/

-- Procedure to retrieve all transactions for a specific customer
CREATE OR REPLACE PROCEDURE GetCustomerTransactions(p_CustomerID IN NUMBER)
IS
BEGIN
    FOR r IN (SELECT * FROM Transactions WHERE CustomerID = p_CustomerID) LOOP
        DBMS_OUTPUT.PUT_LINE('Transaction ID: ' || r.TransactionID || ', Property ID: ' || r.PropertyID || ', Amount: ' || r.Amount || ', Status: ' || r.Status);
    END LOOP;
END;
/

-- Procedure to update property price by percentage
CREATE OR REPLACE PROCEDURE UpdatePropertyPrice(p_PropertyID IN NUMBER, p_Percentage IN NUMBER)
IS
BEGIN
    UPDATE Properties
    SET Price = Price + (Price * p_Percentage / 100)
    WHERE PropertyID = p_PropertyID;
    DBMS_OUTPUT.PUT_LINE('Updated Property ID ' || p_PropertyID || ' price by ' || p_Percentage || '%.');
END;
/

-- Example calls for procedures
BEGIN
    GetCustomerTransactions(1);
END;
/

BEGIN
    UpdatePropertyPrice(1, 10);
END;
/

-- Example data query
SELECT * FROM Customers;
SELECT * FROM Agents;
SELECT * FROM Properties;
SELECT * FROM Transactions;
SELECT * FROM Inquiries;
